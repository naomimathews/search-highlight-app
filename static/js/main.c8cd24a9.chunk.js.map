{"version":3,"sources":["components/MessagePopup/MessagePopup.js","components/FileInput/FileInput.js","components/TextInput/TextInput.js","utils/stringUtils.js","components/TextHighlighter/TextHighlighter.js","utils/customHooks.js","App.js","utils/fileUtils.js","index.js"],"names":["modalRoot","document","getElementById","MessagePopup","props","handleActionClick","confirmCallback","el","createElement","appendChild","this","removeChild","ReactDOM","createPortal","className","message","onClick","React","Component","FileInput","fileSelectCallback","fileExtension","buttonText","useState","hasError","setHasError","fileInputRef","useRef","validateFile","file","RegExp","test","name","type","accept","onChange","event","fileObj","target","files","value","ref","current","click","TextInput","changeCallback","placeholder","randomUniqueString","prefix","Math","random","toString","replace","TextHighlighter","text","search","title","textChunks","setTextChunks","matchCount","setMatchCount","searchQuery","delay","debouncedValue","setDebouncedValue","useEffect","timer","setTimeout","clearTimeout","useDebounce","handleMatchesFound","useCallback","matches","tempTextChunks","nextIndex","i","length","index","push","substring","isHighlighted","key","handleMatchesNotFound","query","options","flags","isCaseSensitive","searchRegexp","matchAll","getAllMatchesForQuery","map","textChunk","App","setFile","textContent","setTextContent","searchInputText","setSearchInputText","handleFileSelect","Promise","resolve","reject","reader","FileReader","onload","result","readAsText","err","readFileAsText","then","render","StrictMode"],"mappings":"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","file":"static/js/main.c8cd24a9.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types';\nimport './MessagePopup.css'\n\n// These two containers are siblings in the DOM\nconst modalRoot = document.getElementById('modal-root');\n\nclass MessagePopup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  handleActionClick = () => {\n    if(this.props.confirmCallback) {\n      this.props.confirmCallback()\n    } \n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className='modal-overlay'>\n        <div className='modal-content-box'>\n          <p className='popup-message'>{this.props.message}</p>\n          <button \n            onClick={this.handleActionClick}\n            className='gradient-button popup-close-button'>\n              Ok\n          </button>\n        </div>\n      </div>,\n      this.el\n    );\n  }\n}\n\nMessagePopup.propTypes = {\n  message: PropTypes.string.isRequired,\n  confirmCallback: PropTypes.func.isRequired\n}\n\nexport default MessagePopup","import React, { useState, useRef } from 'react'\nimport PropTypes from 'prop-types';\nimport './FileInput.css'\n\nimport MessagePopup from '../MessagePopup/MessagePopup'\n\nfunction FileInput (props) {\n  const { fileSelectCallback, fileExtension, buttonText='Select file' } = props\n  const [hasError, setHasError] = useState(false)\n  const fileInputRef = useRef()\n  \n  const handleFileSelect = (event) => {\n    const fileObj = event.target.files[0]\n    if (fileObj) {\n      const isFileValid = validateFile(fileObj)\n      if (isFileValid) {\n        fileSelectCallback(fileObj)\n      } else {\n        setHasError(true)\n      }\n    }\n\n    // to trigger onChange when same file is selected repeatedly\n    event.target.value = ''\n  }\n\n  const validateFile = (file) => {\n    if (fileExtension) {\n      const fileExtRegex = new RegExp(`^.+${fileExtension}$`, 'i')\n      return fileExtRegex.test(file.name)\n    } \n    return true\n  }\n\n  const clearError = () => {\n    setHasError(false)\n  }\n\n  const handleTriggerClick = () => {\n    fileInputRef.current.click()\n  }\n\n  return (\n    <div className='file-input-container'>\n\n      {/* Simple button to open file explorer for selection */}\n      <input \n        className='file-input' \n        type='file' \n        accept={fileExtension} \n        onChange={handleFileSelect}\n        ref={fileInputRef}\n      />\n      <button \n        onClick={handleTriggerClick}\n        className='file-input-trigger gradient-button'>\n          {buttonText}\n      </button>\n\n      {/* Popup to show error when file type is not correct */}\n      {\n        hasError && <MessagePopup \n          message={`Selected file was not a valid ${fileExtension} file`}\n          confirmCallback={clearError}/>\n      }\n\n    </div>\n  )\n}\n\nFileInput.propTypes = {\n  fileSelectCallback: PropTypes.func.isRequired,\n  fileExtension: PropTypes.string,\n  buttonText: PropTypes.string\n}\n\nexport default FileInput","import React from 'react'\nimport PropTypes from 'prop-types';\nimport './TextInput.css'\n\nfunction TextInput (props) {\n  const { value, changeCallback, className = '', placeholder = '' } = props\n\n  const handleChange = (event) => {\n    changeCallback(event.target.value)\n  }\n\n  return (\n    <input \n      className={`text-input ${className}`} \n      type='text' onChange={handleChange} \n      value={value} \n      placeholder={placeholder}/>\n  )\n}\n\nTextInput.propTypes = {\n  value: PropTypes.string,\n  changeCallback: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  placeholder: PropTypes.string\n}\n\n\nexport default TextInput","export function getAllMatchesForQuery (text, query, options = {}) {\n  const  flags = `g${options.isCaseSensitive ? '' : 'i'}`\n  const searchRegexp = new RegExp(query, flags)\n  return [...text.matchAll(searchRegexp)]\n}\n\nexport function randomUniqueString (prefix) {\n  return Math.random().toString(36).replace('0.',prefix || '');\n}","import React, { useState, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types';\nimport './TextHighlighter.css'\n\n// Utility functions\nimport { getAllMatchesForQuery, randomUniqueString } from '../../utils/stringUtils'\nimport { useDebounce } from '../../utils/customHooks'\n\nfunction TextHighlighter (props) {\n  const {text, search = '', className = '', title = '', } = props\n  const [textChunks, setTextChunks] = useState([])\n  const [matchCount, setMatchCount] = useState(0)\n  const searchQuery = useDebounce(search, 300)\n\n  const handleMatchesFound = useCallback((text, searchQuery, matches) => {\n\n    // Split the text into chunks of text to be highlighted or not\n    // For eg if 'name' was searched in 'My name is Jane'\n    // the below logic splits the text to 'My' 'name' and 'is Jane'\n    const tempTextChunks = [];\n    let nextIndex = 0;\n    for (let i = 0; i < matches.length; i++) {\n      if (nextIndex < matches[i].index) {\n        tempTextChunks.push({\n          text: text.substring(nextIndex, matches[i].index),\n          isHighlighted: false,\n          key: randomUniqueString()\n        })\n      } \n      tempTextChunks.push({\n        text: text.substring(matches[i].index, matches[i].index + searchQuery.length),\n        isHighlighted: true,\n        key: randomUniqueString()\n      })\n      nextIndex = matches[i].index + searchQuery.length\n    }\n\n    if(nextIndex < text.length - 1) {\n      tempTextChunks.push({\n        text: text.substring(nextIndex, text.length),\n        isHighlighted: false,\n        key: randomUniqueString()\n      })\n    }\n\n    setTextChunks(tempTextChunks)\n    setMatchCount(matches.length)\n  }, [setTextChunks, setMatchCount])\n  \n  const handleMatchesNotFound = useCallback((text) => {\n    setTextChunks([{\n      text: text,\n      isHighlighted: false,\n      key: randomUniqueString()\n    }])\n    setMatchCount(0)\n  }, [])\n\n  useEffect(() => {\n    if (searchQuery) {\n      const matches = getAllMatchesForQuery(text, searchQuery)\n      debugger\n      if (matches.length) {\n        handleMatchesFound(text, searchQuery, matches)\n      } else {\n        handleMatchesNotFound(text)\n      }\n    } else {\n      handleMatchesNotFound(text)\n    }\n  }, [text, searchQuery, handleMatchesNotFound, handleMatchesFound])\n\n  return (<div className={`text-match-container  ${className}`}>\n\n    <div className='highlighter-header'>\n      <h2 className='highlighter-title'>{title}</h2>\n      {searchQuery && \n        <span className='match-count'> \n          {matchCount === 0 ? 'No matches ' : (matchCount === 1) ? '1 match ' : `${matchCount} matches `}\n          found\n        </span>\n      } \n    </div>\n\n    {/* Loop over the generated text chunks and add highlight class to matched text */}\n    <div className='text-container'>\n      {textChunks.map((textChunk) => (\n        <span \n          key={textChunk.key} \n          className={textChunk.isHighlighted ? 'highlighter' : ''}>\n            {textChunk.text}\n        </span>\n      ))}\n    </div>\n\n  </div>)\n}\n\nexport default TextHighlighter\n\nTextHighlighter.propTypes = {\n  text: PropTypes.string.isRequired,\n  search: PropTypes.string,\n  className: PropTypes.string,\n  title: PropTypes.string\n}","import { useState, useEffect } from \"react\";\n\nexport function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      if (timer) clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}","import React, {useState} from 'react';\nimport './App.css';\n\n// Child components\nimport FileInput from './components/FileInput/FileInput'\nimport TextInput from './components/TextInput/TextInput'\nimport TextHighlighter from './components/TextHighlighter/TextHighlighter'\n\n// Utility functions\nimport { readFileAsText } from './utils/fileUtils'\n\nfunction App() {\n  const [file, setFile] = useState()\n  const [textContent, setTextContent] = useState('')\n  const [searchInputText, setSearchInputText] = useState('')\n\n  const handleFileSelect = (fileObj) => {\n    setFile(fileObj)\n    readFileAsText(fileObj).then((text) => {\n      setTextContent(text)\n    })\n  }\n\n  const handleSearchChange = (text) => {\n    setSearchInputText(text)\n  }\n\n  return (\n    <div className='app-container'>\n\n      {/* Page layout when no file is selected */}\n      {!file && <div className='file-upload-container'>\n        <h1 className='file-upload-msg'>Upload a .txt file to begin search</h1>\n        <FileInput buttonText='Select File' fileSelectCallback={handleFileSelect} fileExtension='.txt'/>\n      </div>}\n\n      {/* Page layout when file is selected */}\n      {file && <div className='search-text-container'>\n        <div className='app-controls'>\n          <TextInput className='search-input' placeholder='Search uploaded file contents' changeCallback={handleSearchChange} value={searchInputText}/>\n          <FileInput buttonText='Change File' fileSelectCallback={handleFileSelect} fileExtension='.txt'/>\n        </div>\n        <TextHighlighter className='text-content' title={file.name} text={textContent} search={searchInputText} />\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","export function readFileAsText (file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader();\n    reader.onload = function(event) {\n      resolve(event.target.result)\n    }\n\n    try {\n      reader.readAsText(file);\n    } catch (err) {\n      reject(err)\n    }\n  })\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}